import streamlit as st
import random
import string
import hashlib
# --- Logo & Ti√™u ƒë·ªÅ (bo tr√≤n + g·ªçn ƒë·∫πp) ---
logo_url = "https://raw.githubusercontent.com/TuanHoang1229/web2/refs/heads/main/IMG_2935.JPG"
st.markdown("""
    <div style="
        display: flex; align-items: center; justify-content: space-between;
        padding: 10px 20px; background-color: #ffffff;
        border-radius: 20px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
        <div style="display: flex; align-items: center;">
            <img src="{logo_url}" alt="Logo" width="50" height="50" style="border-radius: 50%; margin-right: 15px;">
            <h2 style="margin: 0; color: #40E0D0;">Tin H·ªçc Online</h2>
        </div>
    </div>
    <hr style="margin-top: 10px;">
""", unsafe_allow_html=True)

# --- Menu 3 g·∫°ch (sidebar) ---
with st.sidebar:
    st.image(logo_url, width=100)
    st.title("‚ò∞ Menu")
    choice = st.radio("Ch·ªçn chuy√™n m·ª•c:", [
        "üè† Trang ch·ªß",
        "üîë Ki·ªÉm tra m·∫≠t kh·∫©u",
        "üåê Thi·∫øt k·∫ø Web c∆° b·∫£n", 
        "üîê An to√†n th√¥ng tin",
        "üìÇ Kho t√†i li·ªáu",
        "üß† Tr·∫Øc nghi·ªám",
        "üí¨ G√≥c chia s·∫ª"
    ])

if choice == "üè† Trang ch·ªß":
    st.title("üìò Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi G√≥c T·ª± H·ªçc Tin h·ªçc")
    st.markdown("""
    (n·ªôi dung nh∆∞ b·∫°n ƒë√£ vi·∫øt ·ªü `tabs[0]`)
    """)

elif choice == "üîë Ki·ªÉm tra m·∫≠t kh·∫©u":
    st.header("üîê Ki·ªÉm tra & T·∫°o m·∫≠t kh·∫©u m·∫°nh")
    # (ph·∫ßn ki·ªÉm tra m·∫≠t kh·∫©u nh∆∞ c≈©)

elif choice == "üåê Thi·∫øt k·∫ø Web c∆° b·∫£n":
    st.header("üñ•Ô∏è Thi·∫øt k·∫ø Web c∆° b·∫£n v·ªõi HTML & CSS")
    # (ph·∫ßn thi·∫øt k·∫ø web nh∆∞ tabs[2])

# ... ti·∫øp t·ª•c cho c√°c chuy√™n m·ª•c kh√°c


# T√≠nh ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
def calculate_strength(password):
    strength = 0
    if len(password) >= 8:
        strength += 1
    if any(c.islower() for c in password):
        strength += 1
    if any(c.isupper() for c in password):
        strength += 1
    if any(c.isdigit() for c in password):
        strength += 1
    if any(c in string.punctuation for c in password):
        strength += 1
    return strength

# UI
st.set_page_config(page_title="T·∫°o m·∫≠t kh·∫©u m·∫°nh", page_icon="üîí")
st.title("üîê Tr√¨nh t·∫°o m·∫≠t kh·∫©u m·∫°nh")

length = st.number_input("ƒê·ªô d√†i m·∫≠t kh·∫©u", min_value=6, max_value=100, value=12)

if st.button("T·∫°o m·∫≠t kh·∫©u"):
    chars = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(chars) for _ in range(length))
    st.text_input("M·∫≠t kh·∫©u c·ªßa b·∫°n", password)
    
    strength = calculate_strength(password)
    strength_labels = ["R·∫•t y·∫øu", "Y·∫øu", "Trung b√¨nh", "M·∫°nh", "R·∫•t m·∫°nh"]
    st.progress(strength * 20)
    st.success(f"ƒê·ªô m·∫°nh: {strength_labels[strength - 1] if strength else 'R·∫•t y·∫øu'}")

    if st.button("L∆∞u m·∫≠t kh·∫©u (SHA-256)"):
        hashed = hashlib.sha256(password.encode()).hexdigest()
        with open("saved_passwords.txt", "a") as f:
            f.write(hashed + "\n")
        st.success("ƒê√£ l∆∞u m·∫≠t kh·∫©u (d·∫°ng SHA-256) v√†o file.")


def calculate_strength(password):
    strength = 0
    if len(password) >= 8:
        strength += 1
    if any(c.islower() for c in password):
        strength += 1
    if any(c.isupper() for c in password):
        strength += 1
    if any(c.isdigit() for c in password):
        strength += 1
    if any(c in string.punctuation for c in password):
        strength += 1
    return strength

def password_strength_text(score):
    if score <= 2:
        return "‚ùå Y·∫øu", "red"
    elif score == 3 or score == 4:
        return "‚ö†Ô∏è Trung b√¨nh", "orange"
    else:
        return "‚úÖ M·∫°nh", "green"

st.title("üîê Ki·ªÉm tra ƒë·ªô m·∫°nh c·ªßa m·∫≠t kh·∫©u")

password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password")

if password:
    score = calculate_strength(password)
    strength_text, color = password_strength_text(score)
    
    st.markdown(f"**ƒê√°nh gi√°:** <span style='color:{color}'>{strength_text}</span>", unsafe_allow_html=True)
    st.progress(score * 20)
